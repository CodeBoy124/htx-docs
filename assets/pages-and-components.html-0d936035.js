import{_ as a,o as n,c as s,a as t}from"./app-7492dbda.js";const e={},o=t(`<h1 id="pages-and-components" tabindex="-1"><a class="header-anchor" href="#pages-and-components" aria-hidden="true">#</a> Pages and components</h1><p>Lets begin by discussing what pages and components are.</p><h2 id="differences-and-simularities" tabindex="-1"><a class="header-anchor" href="#differences-and-simularities" aria-hidden="true">#</a> Differences and simularities</h2><p>Pages are the root &quot;component&quot; and are responsible for the names of the output php files. By default pages are defined in <code>src/pages</code>, but that can be changed in the <code>htx_config.json</code> file.</p><p>Components are very simular and the only differences are that components can receive information (the child elements and attribute/properties) from the parent components. Page on the other hand are as I said the root component and cannot receive any information. Components usually start with an uppercase letter. Most components don&#39;t have just uppercase letters, but also lowercase. The builtin components do use all uppercase</p><h2 id="file-extension" tabindex="-1"><a class="header-anchor" href="#file-extension" aria-hidden="true">#</a> File extension</h2><p>Every component file (therefor also pages) ends in <code>.htx</code> unless otherwise configured in <code>htx_config.json</code></p><h2 id="children" tabindex="-1"><a class="header-anchor" href="#children" aria-hidden="true">#</a> Children</h2><p>For those that don&#39;t know, children are what is contained inside an element. Not every component/html tag has children. In a component you can use the <code>&lt;INNER /&gt;</code> component/tag (which <strong>MUST</strong> end with <code>/&gt;</code> and is builtin) to place the children there. If you want to you can also use it multiple times, but usually you don&#39;t.</p><h2 id="attributes" tabindex="-1"><a class="header-anchor" href="#attributes" aria-hidden="true">#</a> Attributes</h2><p>Components also have attributes/properties. You can access the in the <code>$props</code> variable. For example if you want to access a &#39;my-attribute&#39; property you can read <code>$props[&quot;my-attribute&quot;]</code>.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>If an attribute/property is not defined it will not be assigned, so please validate your properties at the start of you file and give an error/exception if anything is missing</p></div><h2 id="children-and-attributes-example" tabindex="-1"><a class="header-anchor" href="#children-and-attributes-example" aria-hidden="true">#</a> Children and Attributes example</h2><p>Here is a quick example of a layout component</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$props</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;title&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;The layout requires a title attribute/property&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?=</span> <span class="token variable">$props</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;title&quot;</span><span class="token punctuation">]</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>INNER</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="complex-attributes" tabindex="-1"><a class="header-anchor" href="#complex-attributes" aria-hidden="true">#</a> Complex attributes</h2><p>If you want to pass an attribute to a component (for regular tags you just use the php way) that also requires some computation you can use &quot;nested&quot; php code. Htx assumes all attributes/properties are valid php and therefor you can use <code>()</code>. Let me demonstrate</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">$z</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>$x</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- this works --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">$z</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>$x+$y</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- this works --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">$z</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>($x</span> <span class="token attr-name">+</span> <span class="token attr-name">$y)</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- this works --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">$z</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>$x</span> <span class="token attr-name">+</span> <span class="token attr-name">$y</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- this fails, because the &quot;+&quot; is detected to be an attribute name --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nesting can not only be done by <code>()</code>, but also <code>[]</code> and <code>{}</code></p><h2 id="importing-components" tabindex="-1"><a class="header-anchor" href="#importing-components" aria-hidden="true">#</a> Importing components</h2><p>Htx does not have any auto import feature for components. Instead you have to manually import them using one of the following</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- import &quot;./path/to/file/without/Extension&quot;--&gt;</span>
<span class="token comment">&lt;!-- import ComponentName from &quot;./path/to/file/without/Extension&quot; --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use the top one to use the filename as the component name. If you want to change the name you can use the bottom one.</p><p>If you have a layout file in <code>src/layouts/MyLayout.htx</code>, some user component in <code>src/other/user/Profile.htx</code> and you have a page in <code>src/pages/SomePage.htx</code> You can import/use the layout in the page like this</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">&lt;!-- import &quot;../layouts/MyLayout&quot; --&gt;</span>
<span class="token comment">&lt;!-- import UserProfile from &quot;../other/user/Profile&quot; --&gt;</span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$user</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string double-quoted-string">&quot;name&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;some user&quot;</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">&quot;email&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;example@domain.com&quot;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyLayout</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Some page<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    Some page contents
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserProfile</span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>$user</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="global-or-local" tabindex="-1"><a class="header-anchor" href="#global-or-local" aria-hidden="true">#</a> Global or Local</h2><p>By default every component defines local variables and functions that cannot be accessed from other components (unless you try to). Local variables are converted to a name like <code>htx_&lt;component&gt;_&lt;uid&gt;_&lt;variable&gt;</code>. If you want to access global variables (page wide) you can use the <code>$GLOBAL_</code> prefix, so <code>$GLOBAL_x</code> gets converted to <code>$x</code>. Functions are simular, but if they are not defined within a component htx assumes they are global whereas with variables they are usually assumed to be local</p>`,27),p=[o];function l(c,i){return n(),s("div",null,p)}const r=a(e,[["render",l],["__file","pages-and-components.html.vue"]]);export{r as default};
