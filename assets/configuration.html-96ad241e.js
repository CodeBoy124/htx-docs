import{_ as e,o as t,c as o,a}from"./app-7492dbda.js";const i={},n=a('<h1 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h1><p>There are many different things you can configure about Htx&#39;s behaviour. In your &quot;htx_config.json&quot; you can view them. Most of them you can understand from the name, but others need more of an explanation.</p><h2 id="environment" tabindex="-1"><a class="header-anchor" href="#environment" aria-hidden="true">#</a> environment</h2><p>This should be either <code>dev</code> (development) or <code>prod</code> (production). If it is <code>dev</code> comments will be added that make it easier to debug your code, but production doesn&#39;t contain those comments and removes blank lines.</p><h2 id="extension" tabindex="-1"><a class="header-anchor" href="#extension" aria-hidden="true">#</a> extension</h2><p>This contains both extensions for the source and output files. The value in the src part is what files Htx will look for in the source folder. The value in the out part is the file extension it will put on the output files. Both don&#39;t include a &quot;.&quot; character, because this will be automaticly added</p><h2 id="directory" tabindex="-1"><a class="header-anchor" href="#directory" aria-hidden="true">#</a> directory</h2><p>Where Htx will search for root files (component files can be outside it) and where it will output the files. The value in the src part is where it will look for root files. The value in the out part is where it will put the converted files.</p><h2 id="constant" tabindex="-1"><a class="header-anchor" href="#constant" aria-hidden="true">#</a> constant</h2><p>Some constants.</p><p>The variable part will contain the template for the converted local variables. In there you can use the <code>&lt;component&gt;</code>, <code>&lt;uid&gt;</code> and <code>&lt;variable&gt;</code> parts to make it more local.</p><p>The props part will define the variable where the attributes/properties are stored. By default you use <code>$props</code> for the attributes/properties, but with this you can change it.</p>',12),r=[n];function h(c,s){return t(),o("div",null,r)}const l=e(i,[["render",h],["__file","configuration.html.vue"]]);export{l as default};
