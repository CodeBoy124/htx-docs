import{_ as e,o as a,c as t,a as n}from"./app-7492dbda.js";const i={},s=n(`<h1 id="cli-usage" tabindex="-1"><a class="header-anchor" href="#cli-usage" aria-hidden="true">#</a> Cli usage</h1><p>Now that the cli is installed we can start using it. There are 3 commands in total:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>htx <span class="token comment"># or &#39;htx run&#39; if you prefer that</span>
htx <span class="token function">watch</span> ./path/to/folder/to/watch
htx init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="htx-run" tabindex="-1"><a class="header-anchor" href="#htx-run" aria-hidden="true">#</a> htx run</h2><p>This command converts either the default pages folder (./src/pages) or one that is defined in the htx_config.json You can see this as a &#39;build&#39; command.</p><h2 id="htx-watch" tabindex="-1"><a class="header-anchor" href="#htx-watch" aria-hidden="true">#</a> htx watch</h2><p>This one is simular to the run command, but it detects changes in the folder you specify (see example at the top on how to use it) and reruns the run command. It is worth noting that because of how windows works the program will ignore changes for 5 seconds after a change is detected, because on windows there sometimes are multiple events for 1 change. You can see this as a &#39;dev&#39; command.</p><h2 id="htx-init" tabindex="-1"><a class="header-anchor" href="#htx-init" aria-hidden="true">#</a> htx init</h2><p>Usually once you start a project it&#39;s a good idea to create a htx_config.json file. This command automaticly generates a configuration file with the default settings. I&#39;ll explain the config file it self later on TODO: Explain config file</p>`,9),o=[s];function h(r,c){return a(),t("div",null,o)}const l=e(i,[["render",h],["__file","cli-usage.html.vue"]]);export{l as default};
